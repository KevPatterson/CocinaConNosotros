"""
Django settings for djangocrud project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from django.contrib.messages import constants as messages
from django.contrib.messages import constants as message_constants
from django.core.cache import cache
#from tasks.models import SecuritySettings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='fallback-secret-key-for-local-development') # LLave secreta para la aplicación

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', default=True, cast=bool) # Modo de depuración
ALLOWED_HOSTS = config('DJANGO_ALLOWED_HOSTS', default='', cast=lambda v: v.split(',')) # # Lista de hosts permitidos
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# ALLOWED_HOSTS = ['192.168.1.100'] # Para usar en producción (IP pública)
#DEBUG = False # Deshabilitar en el modo de producción

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tasks',
    'widget_tweaks',
    'sslserver',
    'axes',
    'auditlog',
    'password_policies',
    'django_password_history',
    'django.contrib.sites',
]

# Allauth
INSTALLED_APPS += [ 
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

# Proveedores de autenticación
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'auditlog.middleware.AuditlogMiddleware',
    'axes.middleware.AxesMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

MIDDLEWARE += [
    'password_policies.middleware.PasswordChangeMiddleware',
    #'django_otp.middleware.OTPMiddleware',  # Middleware para MFA
]

ROOT_URLCONF = 'djangocrud.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangocrud.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'B_D',
        'USER': 'postgres',
        'PASSWORD': 'admin',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # Evita contraseñas similares a atributos del usuario (como nombre de usuario o email)
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'max_similarity': 0.7,  # Ajusta el nivel de similitud permitido
        },
    },
    # Longitud mínima de la contraseña
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # Ajustado para una mayor fortaleza
        },
    },
    # Evita contraseñas comunes
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    # Evita contraseñas puramente numéricas
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    # Validación de complejidad personalizada: combinación de mayúsculas, minúsculas, números y caracteres especiales
    
    # Prohibición de reutilización de contraseñas recientes
    
    # Caducidad de la contraseña
    
    # Prohibición de patrones repetidos en contraseñas
]

# POLÍTICAS DE SEGURIDAD:

# Politicas de contraseñas generales
PASSWORD_HISTORY_COUNT = 24 # Número de contraseñas que se almacenan en el historial
PASSWORD_MIN_LENGTH = 8  # Mínimo número de caracteres en una contraseña
PASSWORD_COMPLEXITY = {  # Politicas de complejidad de la contraseña
    'UPPER': 1,  # 
    'LOWER': 1,  # 
    'DIGITS': 1,  # 
    'SPECIAL': 1,  # 
}
PASSWORD_EXPIRY_DAYS = 90  # Tiempo (en días) que una contraseña es válida antes de requerir cambio (opcional)
PASSWORD_CHANGE_ON_FIRST_LOGIN = True  # Cambiar la contraseña al primer inicio de sesión

# Configuración del password_policies
PASSWORD_MIN_LENGTH = 8  # Mínimo número de caracteres en una contraseña
PASSWORD_MAX_LENGTH = 128  # Máximo número de caracteres en una contraseña
PASSWORD_MIN_LOWERCASE = 1  # Número mínimo de letras minúsculas en una contraseña
PASSWORD_MIN_UPPERCASE = 1  # Número mínimo de letras mayúsculas en una contraseña
PASSWORD_MIN_NUMERIC = 1  # Número mínimo de números en una contraseña
PASSWORD_MIN_SPECIAL = 1  # Número mínimo de caracteres especiales en una contraseña
PASSWORD_MIN_REPEAT = 1  # Número mínimo de caracteres repetidos en una contraseña
PASSWORD_MIN_SEQUENCE = 3  # Número mínimo de secuencias en una contraseña
PASSWORD_MIN_REPEAT_CHAR = 4  # Número mínimo de caracteres repetidos en una contraseña
PASSWORD_MIN_REPEAT_WORD = 1  # Número mínimo de palabras repetidas en una contraseña

# Configuración de la password_history
PASSWORD_HISTORY_COUNT = 15 # Número de contraseñas que se almacenan en el historial
PREVIOUS_PASSWORD_COUNT = 3  # Número de contraseñas anteriores a la actual que se almacenan en el historial
AUTH_PASSWORD_HISTORY = 24  # Número de contraseñas a recordar
PASSWORD_MINIMUM_AGE = 5 # Tiempo (en días) que debe pasar antes de cambiar la contraseña nuevamente (opcional)
PASSWORD_MAXIMUM_AGE = 183  # 90 días # Tiempo (en días) que una contraseña es válida antes de requerir cambio (opcional)

# Configuración de django-axes
AXES_FAILURE_LIMIT = 5  # Número máximo de intentos fallidos antes de bloquear
AXES_COOLOFF_TIME = 1  # Tiempo en horas antes de restablecer los intentos fallidos (1 hora de enfriamiento)
AXES_LOCKOUT_TEMPLATE = 'lockout.html'  # Plantilla personalizada para mostrar al usuario bloqueado
AXES_USE_USER_AGENT = True  # Considera el agente de usuario como parte de los intentos
#AXES_ONLY_USER_FAILURES = True  # Monitorea solo fallos de inicio de sesión por usuario (Bloquea x usuario, no x IP)
AXES_USERNAME_FORM_FIELD = 'username'  # Campo de formulario del nombre de usuario
AXES_IP_WHITELIST = ['127.0.0.1']  # Lista blanca de IPs que no serán bloqueadas
AXES_RESET_ON_SUCCESS = True  # Restablecer el contador tras un inicio exitoso
AXES_LOCK_OUT_AT_FAILURE = True  # Bloquea al fallar el inicio de sesión

# Configuraciones adicionales de django-axes para bloqueo de IP
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = False  # Desactiva bloqueo combinado por usuario e IP
AXES_ONLY_USER_FAILURES = False  # Permite bloquear la IP independientemente del usuario
AXES_VERBOSE = True  # Mostrar mensajes de bloqueo en la consola de desarrollo

AXES_NEVER_LOCKOUT = [ # Lista de IPs que nunca se bloquearán
    '127.0.0.1',  # IP local (localhost)
    '::1',  # IPv6 localhost
]

# Obtener el valor de intentos fallidos desde la base de datos
try:
    security_settings = cache.get("failure_limit")
    if not security_settings:
        security_settings = SecuritySettings.objects.first()
        if security_settings:
            cache.set("failure_limit", security_settings.failure_limit, 300)  # Cachear por 5 minutos
    AXES_FAILURE_LIMIT = security_settings.failure_limit if security_settings else 5
except:
    AXES_FAILURE_LIMIT = 5  # Valor por defecto en caso de error

# Para bloqueo de IPs detrás de un proxy inverso o un balanceador de carga (Nginx, Apache, etc.)
# Utilizar en producción
#AXES_BEHIND_REVERSE_PROXY = True
#AXES_REVERSE_PROXY_HEADER = 'HTTP_X_FORWARDED_FOR'

# Definir el ID del sitio (para la autenticación de Google)
SITE_ID = 2

# Configuraciones adicionales para django-allauth
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = "username"
ACCOUNT_EMAIL_REQUIRED = True

# Configuración de cookies seguras
CSRF_COOKIE_SECURE = True # Fuerza que el cookie CSRF sea seguro
SESSION_COOKIE_SECURE = True # Fuerza que el cookie de sesión sea seguro
X_FRAME_OPTIONS = 'DENY' # Fuerza que los iframes sean restringidos
SESSION_COOKIE_AGE = 3600   # 30 minutos en segundos
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Destruir sesión al cerrar el navegador
# Configurar el uso de HTTPS
SECURE_SSL_REDIRECT = True # Fuerza redirecciones seguras (Redirige todas las solicitudes HTTP a HTTPS)
SECURE_HSTS_SECONDS = 31536000  # Fuerza HTTPS durante un año
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Incluye subdominios en HSTS
SECURE_HSTS_PRELOAD = True  # Precarga HSTS
# Desactivar caché para formularios sensibles
SECURE_BROWSER_XSS_FILTER = True # Fuerza que el navegador de XSS sea seguro
SECURE_CONTENT_TYPE_NOSNIFF = True # Fuerza que el Content-Type sea seguro

#Protección Contra Reescritura de URLs
APPEND_SLASH = True # Agregar barra al final de la URL
SESSION_COOKIE_HTTPONLY = True  # Solo accesible desde el servidor (Evita acceso desde JavaScript)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Sesiones en la base de datos

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',  # Backend de Axes
    'django.contrib.auth.backends.ModelBackend',  # Backend predeterminado de Django
    #'django_otp.backends.OTPModelBackend',       # Agrega soporte para OTP
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'es-es'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# Static and media files
STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Login/logout settings
#LOGIN_URL = 'two_factor:login'  # URL para iniciar sesión con MFA
LOGIN_URL = '/signin'  # Página donde los usuarios no autenticados deben iniciar sesión
LOGIN_REDIRECT_URL = '/dashboard/' # Redirige al dashboard después de iniciar sesión
LOGOUT_REDIRECT_URL = '/signin'  # URL para cerrar sesión

# Configura redirecciones tras MFA
TWO_FACTOR_CALLS_REDIRECT = 'dashboard'  # URL para redireccionar al usuario tras una llamada de MFA
TWO_FACTOR_SMS_REDIRECT = 'dashboard'  # URL para redireccionar al usuario tras una llamada de SMS

PASSWORD_RESET_TIMEOUT_DAYS = PASSWORD_EXPIRY_DAYS
PASSWORD_CHANGE_REDIRECT_URL = '/password_change_done/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'

MESSAGE_TAGS = {
    message_constants.DEBUG: 'debug',
    message_constants.INFO: 'info',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning',
    message_constants.ERROR: 'danger',
}
